package views.inventory;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.Inventory;
import dao.InventoryDAO;
import jakarta.persistence.EntityManager;
import jakarta.persistence.TypedQuery;
import utils.JPAUtil;

/**
 *
 * @author joaopedro
 */
public class InventoryManagementView extends javax.swing.JFrame {

	/**
	 * Creates new form InventoryManagementView
	 */
	public InventoryManagementView() {
		initComponents();
		loadInventoryData();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btn_Back = new javax.swing.JButton();
        txtF_Search = new javax.swing.JTextField();
        btn_Search = new javax.swing.JButton();
        btn_RegIn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Inventory = new javax.swing.JTable();
        btn_RegOut = new javax.swing.JButton();
        btn_AddIng = new javax.swing.JButton();
        btn_EditIng = new javax.swing.JButton();
        btn_Delete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btn_Back.setText("<-");
        btn_Back.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_BackActionPerformed(evt);
            }
        });

        txtF_Search.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btn_Search.setText("Search");
        btn_Search.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SearchActionPerformed(evt);
            }
        });

        btn_RegIn.setText("Register In");
        btn_RegIn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_RegIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RegInActionPerformed(evt);
            }
        });

        jTable_Inventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_Inventory);

        btn_RegOut.setText("Register Out");
        btn_RegOut.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_RegOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RegOutActionPerformed(evt);
            }
        });

        btn_AddIng.setText("Add Ingredient");
        btn_AddIng.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_AddIng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AddIngActionPerformed(evt);
            }
        });

        btn_EditIng.setText("Edit Ingredient");
        btn_EditIng.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_EditIng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_EditIngActionPerformed(evt);
            }
        });

        btn_Delete.setText("Delete Ingredient");
        btn_Delete.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(279, 279, 279)
                        .addComponent(btn_AddIng, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_EditIng, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btn_Back, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtF_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_RegIn, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(btn_RegOut, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(btn_Back)
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtF_Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_Search)
                    .addComponent(btn_RegOut)
                    .addComponent(btn_RegIn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_AddIng)
                    .addComponent(btn_EditIng)
                    .addComponent(btn_Delete))
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_AddIngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AddIngActionPerformed
		// TODO add your handling code here:
		InventoryRegisterView rv = new InventoryRegisterView();
		rv.setVisible(true);
    }//GEN-LAST:event_btn_AddIngActionPerformed

    private void btn_BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_BackActionPerformed
		// TODO add your handling code here:
		this.dispose();
    }//GEN-LAST:event_btn_BackActionPerformed

    private void btn_EditIngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_EditIngActionPerformed
		// TODO add your handling code here:

		int selectedRow = jTable_Inventory.getSelectedRow();
		if (selectedRow == -1) {
			JOptionPane.showMessageDialog(this, "Selecione um item para editar!", "Aviso", JOptionPane.WARNING_MESSAGE);
			return;
		}

		Object idObj = jTable_Inventory.getValueAt(selectedRow, 0);
		Long id;
		if (idObj instanceof Integer) {
			id = ((Integer) idObj).longValue();
		}
		else if (idObj instanceof Long) {
			id = (Long) idObj;
		}
		else {
			try {
				id = Long.parseLong(idObj.toString());
			} catch (NumberFormatException e) {
				JOptionPane.showMessageDialog(this, "ID inválido: " + idObj, "Erro", JOptionPane.ERROR_MESSAGE);
				return;
			}
		}

		InventoryDAO dao = new InventoryDAO();
		Inventory item = dao.read(id);
		
		loadInventoryData();
		
		if (item != null) {
			// Formulário de edição
			String name = JOptionPane.showInputDialog(this, "Nome:", item.getName());
			String quantityStr = JOptionPane.showInputDialog(this, "Quantidade:", item.getQuantity());
			String minStockStr = JOptionPane.showInputDialog(this, "Estoque Mínimo:", item.getMin_stock());

			try {
				item.setName(name);
				item.setQuantity(Double.parseDouble(quantityStr));
				item.setMin_stock(Integer.parseInt(minStockStr));

				dao.update(item);
				loadInventoryData();
				JOptionPane.showMessageDialog(this, "Item atualizado!");

			} catch (NumberFormatException e) {
				JOptionPane.showMessageDialog(this, "Valores inválidos!", "Erro", JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_btn_EditIngActionPerformed

    private void btn_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DeleteActionPerformed
		// TODO add your handling code here:
		int selectedRow = jTable_Inventory.getSelectedRow();
		if (selectedRow == -1) {
			JOptionPane.showMessageDialog(this, "Selecione um item para excluir!", "Aviso", JOptionPane.WARNING_MESSAGE);
			return;
		}

		int confirm = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja excluir este item?", "Confirmação", JOptionPane.YES_NO_OPTION);
		if (confirm == JOptionPane.YES_OPTION) {
			Object idObj = jTable_Inventory.getValueAt(selectedRow, 0);
			Long id;
			if (idObj instanceof Integer) {
				id = ((Integer) idObj).longValue();
			}
			else if (idObj instanceof Long) {
				id = (Long) idObj;
			}
			else {
				try {
					id = Long.parseLong(idObj.toString());
				} catch (NumberFormatException e) {
					JOptionPane.showMessageDialog(this, "ID inválido: " + idObj, "Erro", JOptionPane.ERROR_MESSAGE);
					return;
				}
			}
			InventoryDAO dao = new InventoryDAO();
			dao.delete(id);
			
		}
		loadInventoryData();
    }//GEN-LAST:event_btn_DeleteActionPerformed

    private void btn_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SearchActionPerformed
		// TODO add your handling code here:

		String searchTerm = txtF_Search.getText().trim();
		if (searchTerm.isEmpty()) {
			loadInventoryData(); // Recarrega todos se estiver vazio
			return;
		}

		try {
			InventoryDAO dao = new InventoryDAO();
			EntityManager em = JPAUtil.getEntityManager();
			TypedQuery<Inventory> query = em.createQuery(
					"SELECT i FROM Inventory i WHERE LOWER(i.name) LIKE LOWER(:term)", Inventory.class);
			query.setParameter("term", "%" + searchTerm + "%");
			List<Inventory> items = query.getResultList();

			DefaultTableModel model = (DefaultTableModel) jTable_Inventory.getModel();
			model.setRowCount(0); // Limpa a tabela

			for (Inventory item : items) {
				model.addRow(new Object[]{
					item.getId(),
					item.getName(),
					item.getQuantity(),
					item.getMin_stock()
				});
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, "Erro na busca: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
		}

    }//GEN-LAST:event_btn_SearchActionPerformed

    private void btn_RegInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_RegInActionPerformed
		// TODO add your handling code here:

		int selectedRow = jTable_Inventory.getSelectedRow();
		if (selectedRow == -1) {
			JOptionPane.showMessageDialog(this, "Selecione um item!", "Aviso", JOptionPane.WARNING_MESSAGE);
			return;
		}

		String amountStr = JOptionPane.showInputDialog(this, "Quantidade a adicionar:");
		try {
			double amount = Double.parseDouble(amountStr);

			Object idObj = jTable_Inventory.getValueAt(selectedRow, 0);
			Long id;
			if (idObj instanceof Integer) {
				id = ((Integer) idObj).longValue();
			}
			else if (idObj instanceof Long) {
				id = (Long) idObj;
			}
			else {
				try {
					id = Long.parseLong(idObj.toString());
				} catch (NumberFormatException e) {
					JOptionPane.showMessageDialog(this, "ID inválido: " + idObj, "Erro", JOptionPane.ERROR_MESSAGE);
					return;
				}
			}

			InventoryDAO dao = new InventoryDAO();
			Inventory item = dao.read(id);

			item.setQuantity(item.getQuantity() + amount);
			dao.update(item);
			loadInventoryData();
		} catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, "Valor inválido!", "Erro", JOptionPane.ERROR_MESSAGE);
		}
		loadInventoryData();
    }//GEN-LAST:event_btn_RegInActionPerformed

    private void btn_RegOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_RegOutActionPerformed
		int selectedRow = jTable_Inventory.getSelectedRow();
		if (selectedRow == -1) {
			JOptionPane.showMessageDialog(this, "Selecione um item!", "Aviso", JOptionPane.WARNING_MESSAGE);
			return;
		}

		String amountStr = JOptionPane.showInputDialog(this, "Quantidade a remover:");
		try {
			double amount = Double.parseDouble(amountStr);

			Object idObj = jTable_Inventory.getValueAt(selectedRow, 0);
			Long id;
			if (idObj instanceof Integer) {
				id = ((Integer) idObj).longValue();
			}
			else if (idObj instanceof Long) {
				id = (Long) idObj;
			}
			else {
				try {
					id = Long.parseLong(idObj.toString());
				} catch (NumberFormatException e) {
					JOptionPane.showMessageDialog(this, "ID inválido: " + idObj, "Erro", JOptionPane.ERROR_MESSAGE);
					return;
				}
			}

			InventoryDAO dao = new InventoryDAO();
			Inventory item = dao.read(id);

			if (amount > item.getQuantity()) {
				JOptionPane.showMessageDialog(this, "Quantidade insuficiente no estoque!", "Erro", JOptionPane.ERROR_MESSAGE);
				return;
			}

			item.setQuantity(item.getQuantity() - amount);
			dao.update(item);
			loadInventoryData();
		} catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, "Valor inválido!", "Erro", JOptionPane.ERROR_MESSAGE);
		}

    }//GEN-LAST:event_btn_RegOutActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(InventoryManagementView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(InventoryManagementView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(InventoryManagementView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(InventoryManagementView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new InventoryManagementView().setVisible(true);
			}
		});
	}

	private void loadInventoryData() {
		try {
			InventoryDAO dao = new InventoryDAO();
			List<Inventory> items = dao.readALL();

			// Modelo de tabela
			DefaultTableModel model = new DefaultTableModel(
					new Object[]{"ID", "Nome", "Quantidade", "Estoque Mínimo"}, 0);

			for (Inventory item : items) {
				model.addRow(new Object[]{
					item.getId(),
					item.getName(),
					item.getQuantity(),
					item.getMin_stock()
				});
			}

			jTable_Inventory.setModel(model);

		} catch (Exception e) {
			JOptionPane.showMessageDialog(this,
					"Erro ao carregar dados: " + e.getMessage(),
					"Erro", JOptionPane.ERROR_MESSAGE);
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_AddIng;
    private javax.swing.JButton btn_Back;
    private javax.swing.JButton btn_Delete;
    private javax.swing.JButton btn_EditIng;
    private javax.swing.JButton btn_RegIn;
    private javax.swing.JButton btn_RegOut;
    private javax.swing.JButton btn_Search;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_Inventory;
    private javax.swing.JTextField txtF_Search;
    // End of variables declaration//GEN-END:variables
}
